// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM8.hdl
// Solved by: Ricardo Marques

/**
 * Memory of 8 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then
 * the in value is loaded into the memory location specified by address
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

    PARTS:
    // Put your code here:
    DMux8Way(in=load, sel=address, a=dmuxOutA, b=dmuxOutB ,c=dmuxOutC ,d=dmuxOutD ,e=dmuxOutE ,f=dmuxOutF ,g=dmuxOutG ,h=dmuxOutH);

    Register(in=in, load=dmuxOutA, out=regOut0);
    Register(in=in, load=dmuxOutB, out=regOut1);
    Register(in=in, load=dmuxOutC, out=regOut2);
    Register(in=in, load=dmuxOutD, out=regOut3);
    Register(in=in, load=dmuxOutE, out=regOut4);
    Register(in=in, load=dmuxOutF, out=regOut5);
    Register(in=in, load=dmuxOutG, out=regOut6);
    Register(in=in, load=dmuxOutH, out=regOut7);

    Mux8Way16(a=regOut0, b=regOut1, c=regOut2, d=regOut3, e=regOut4, f=regOut5, g=regOut6, h=regOut7, sel=address, out=out);

}
